| Kategorie                       | Funktion             | Kurzbeschreibung                                    | Kern-Tricks & Fallen                                   |                |
| ------------------------------- | -------------------- | --------------------------------------------------- | ------------------------------------------------------ | -------------- |
| **Basics: I/O & Strings**       | `ft_putstr`          | Gibt String mit `write` aus                         | Schleife bis `'\0'`, kein `printf` nötig               |                |
|                                 | `ft_strlen`          | Zählt Zeichen bis Nullterminator                    | Pointer-Inkrement statt Index                          |                |
|                                 | `ft_strcpy`          | Kopiert String `src` nach `dest` inklusive `'\0'`   | Nullterminator nicht vergessen                         |                |
|                                 | `ft_strdup`          | Allokiert neuen String und kopiert Inhalt           | `malloc(strlen + 1)` + `ft_strcpy` wiederverwenden     |                |
|                                 | `ft_strcmp`          | Vergleicht Strings lexikographisch                  | Unterschied des ersten ungleichen Zeichens zurückgeben |                |
|                                 | `ft_strcspn`         | Länge bis erstes Zeichen aus `reject`               | Sofort return bei Treffer                              |                |
|                                 | `ft_strspn`          | Länge aus Zeichen aus `accept`                      | Umkehr zu `strcspn`                                    |                |
|                                 | `ft_strpbrk`         | Zeiger auf erstes Zeichen aus `accept` in String    | Rückgabe ist Pointer, nicht Index                      |                |
|                                 | `ft_strrev`          | Kehrt String in-place um                            | Swap mit zwei Indizes von außen nach innen             |                |
|                                 | `ft_swap`            | Tauscht Werte zweier Integer über Pointer           | Pointer dereferenzieren, keine Kopie von Werten        |                |
| **Math / Logic**                | `ft_is_power_2`      | Prüft ob Zahl eine Zweierpotenz ist                 | `(n & (n - 1)) == 0` & `n > 0`                         |                |
|                                 | `max`                | Findet das Maximum in einem Array                   | Mit erstem Element initialisieren                      |                |
|                                 | `lcm`                | Kleinster gemeinsamer Vielfaches                    | `(a * b) / gcd(a,b)` beachten Overflow                 |                |
|                                 | `pgcd`               | Größter gemeinsamer Teiler (GCD)                    | Euklid-Algorithmus                                     |                |
|                                 | `add_prime_sum`      | Summe aller Primzahlen kleiner gleich n             | Trial-Division für Primtest                            |                |
|                                 | `paramsum`           | Summe der Kommandozeilenparameter                   | `argc - 1`                                             |                |
| **Bit-Operations**              | `print_bits`         | Gibt Bits eines Bytes aus                           | Von höchstem Bit zu niedrigstem                        |                |
|                                 | `reverse_bits`       | Spiegelt Bits                                       | Bitweise shift & OR                                    |                |
|                                 | `swap_bits`          | Tauscht obere und untere 4 Bits eines Bytes         | \`(octet >> 4)                                         | (octet << 4)\` |
| **Parsing / Conversions**       | `ft_atoi`            | Wandelt String in int um                            | Whitespace überspringen, +/-, Ziffern verarbeiten      |                |
|                                 | `ft_atoi_base`       | Wandelt String in int mit Basis x um                | Basiszeichen prüfen, Wert berechnen                    |                |
|                                 | `ft_itoa`            | Wandelt int in String um                            | Größe bestimmen, negativ behandeln                     |                |
|                                 | `print_hex`          | Gibt Zahl in Hexadezimal aus                        | Rekursiv oder iterativ mit Hex-Zeichen                 |                |
| **Mini-Algorithmics**           | `fizz_buzz`          | Gibt 1–100 mit Fizz/Buzz-Regeln aus                 | Modulo 3 & 5 prüfen                                    |                |
|                                 | `repeat_alpha`       | Wiederholt Buchstaben nach Position im Alphabet     | a/A = 1, b/B = 2, ..., z/Z = 26                        |                |
|                                 | `rev_print`          | Gibt String rückwärts aus                           | Länge berechnen, rückwärts ausgeben                    |                |
|                                 | `rot_13`             | Rot13-Cipher für Buchstaben                         | Nur Buchstaben rotieren                                |                |
|                                 | `rotone`             | Jeden Buchstaben um 1 Stelle rotieren               | Wrap bei z/Z beachten                                  |                |
|                                 | `search_and_replace` | Ersetzt char1 durch char2 im String                 | Nur wenn beide Zeichen im String vorhanden sind        |                |
|                                 | `ulstr`              | Groß- und Kleinbuchstaben tauschen                  | ASCII-Werte ±32                                        |                |
|                                 | `alpha_mirror`       | Spiegelt Buchstaben im Alphabet (a↔z, b↔y, etc.)    | Formel: `('z' - c + 'a')`                              |                |
|                                 | `union`              | Vereinigt Zeichen beider Strings ohne Duplikate     | Array\[256] als Seen-Map                               |                |
|                                 | `inter`              | Schnittmenge von Zeichen zweier Strings             | Beide enthalten und nur einmal ausgeben                |                |
|                                 | `wdmatch`            | Prüft ob s1 Subsequenz von s2 ist                   | Zwei-Zeiger-Technik                                    |                |
|                                 | `snake_to_camel`     | Wandelt `snake_case` in `camelCase` um              | `_x` → `X`                                             |                |
|                                 | `camel_to_snake`     | Wandelt `camelCase` in `snake_case` um              | Vor Großbuchstaben `_` + lowercase                     |                |
| **Whitespace / Stringspecials** | `first_word`         | Gibt erstes Wort aus                                | Leerzeichen/Tabs überspringen, bis nächstes WS         |                |
|                                 | `last_word`          | Gibt letztes Wort aus                               | Von hinten suchen                                      |                |
|                                 | `epur_str`           | Entfernt zusätzliche Leerzeichen                    | State-Maschine (inWord/outWord)                        |                |
|                                 | `expand_str`         | Zwischen Wörter 3 Leerzeichen einfügen              | `epur_str` + 3 Spaces                                  |                |
|                                 | `rstr_capitalizer`   | Letzten Buchstaben jedes Wortes groß, rest klein    | Nur letzte char ändern                                 |                |
|                                 | `str_capitalizer`    | Erstes Zeichen Wort groß, rest klein                | Nur erstes char ändern                                 |                |
|                                 | `rev_wstr`           | Gibt Wörter rückwärts aus                           | Splitten und Reihenfolge umdrehen                      |                |
|                                 | `rotstring`          | Erstes Wort ans Ende verschieben                    | Split & Join                                           |                |
| **Arrays / Listen**             | `ft_range`           | Erzeugt int-Array von min bis max-1                 | `malloc(sizeof(int) * (max - min))`                    |                |
|                                 | `ft_rrange`          | Int-Array rückwärts                                 | Wie `ft_range`, aber absteigend                        |                |
|                                 | `sort_int_tab`       | Sortiert int-Array (z.B. Bubble-Sort)               | Einfaches Sortierverfahren reicht                      |                |
|                                 | `ft_list_size`       | Gibt Größe einer Linked List zurück                 | Traverse + count                                       |                |
|                                 | `ft_list_foreach`    | Ruft Funktion auf jedes Element einer Liste         | Funktionspointer verwenden                             |                |
|                                 | `ft_list_remove`     | Löscht Knoten mit bestimmtem Wert                   | Pointer auf Pointer für List-Manipulation              |                |
|                                 | `sort_list`          | Sortiert Linked List                                | Datentausch oder Node-Swap                             |                |
| **Spezial**                     | `do_op`              | Führt `a op b` aus (`+ - * / %`)                    | `atoi`, Switch für Operator                            |                |
|                                 | `hidenp`             | Prüft, ob s1 Subsequenz von s2 ist                  | Zwei-Zeiger-Technik                                    |                |
|                                 | `fprime`             | Zerlegt Zahl in Primfaktoren                        | Trial-Division                                         |                |
|                                 | `tab_mult`           | Multipliziert Zahlen 1–9 mit n und gibt Tabelle aus | Schleife + Ausgabe                                     |                |
|                                 | `flood_fill`         | Flutfüll-Algorithmus (DFS oder BFS) für 2D-Array    | Rekursion, Grenzprüfungen                              |                |
