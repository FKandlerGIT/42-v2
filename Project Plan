# Libft Projektplan

Dies ist die Liste der Funktionen, die in deiner Libft-Bibliothek enthalten sein mÃ¼ssen.
Die Funktionen sind in thematisch sinnvolle BlÃ¶cke unterteilt, basierend auf AbhÃ¤ngigkeiten und KomplexitÃ¤t.
Dies hilft, eine strukturierte Herangehensweise beim Erstellen der Funktionen zu gewÃ¤hrleisten.

## ğŸŸ© 1. ZeichenprÃ¼fung & ASCII-Funktionen (unabhÃ¤ngig, gute EinsteigerÃ¼bungen)
Diese brauchst du fÃ¼r viele andere Aufgaben spÃ¤ter (z.â€¯B. `ft_atoi`, `ft_is*` Checks):

- [x] `ft_isalpha` â€“ ÃœberprÃ¼ft, ob ein Zeichen alphabetisch ist
- [x] `ft_isdigit` â€“ ÃœberprÃ¼ft, ob ein Zeichen eine Zahl ist
- [x] `ft_isalnum` â€“ ÃœberprÃ¼ft, ob ein Zeichen alphanumerisch ist
- [x] `ft_isascii` â€“ ÃœberprÃ¼ft, ob ein Zeichen im ASCII-Zeichensatz enthalten ist
- [x] `ft_isprint` â€“ ÃœberprÃ¼ft, ob ein Zeichen druckbar ist
- [x] `ft_tolower` â€“ Wandelt ein Zeichen in Kleinbuchstaben um
- [x] `ft_toupper` â€“ Wandelt ein Zeichen in GroÃŸbuchstaben um

---

## ğŸŸ¦ 2. Speicherfunktionen (Grundlagen fÃ¼r alles mit malloc oder Buffer)
Diese Funktionen sind entscheidend fÃ¼r den Umgang mit Speicher und Buffer-Verwaltung, was dir spÃ¤ter bei vielen dynamischen Operationen hilft.

- [ ] `ft_memset` â€“ Setzt einen Bereich im Speicher auf einen bestimmten Wert
- [ ] `ft_bzero` â€“ Setzt einen Bereich im Speicher auf 0 (nutzt meist `ft_memset`)
- [ ] `ft_memcpy` â€“ Kopiert einen Speicherbereich
- [ ] `ft_memmove` â€“ Verschiebt einen Speicherbereich (mit Ãœberlappung â€“ aber wichtig!)
- [ ] `ft_memchr` â€“ Sucht nach einem Wert in einem Speicherbereich
- [ ] `ft_memcmp` â€“ Vergleicht zwei Speicherbereiche
- [ ] `ft_calloc` â€“ Allokiert Speicher und setzt ihn auf 0 (nutzt oft `ft_bzero`)
- [ ] `ft_strdup` â€“ Erstellt eine Kopie eines Strings (nutzt `ft_strlen` und `malloc`, also ist `ft_calloc` praktisch)

---

## ğŸŸ¨ 3. Stringfunktionen â€“ ohne malloc (Vorbereitung fÃ¼r spÃ¤teres)
Diese Funktionen helfen dir, mit Strings zu arbeiten, ohne dynamischen Speicher zu verwenden.

- [ ] `ft_strlen` â€“ Berechnet die LÃ¤nge eines Strings
- [ ] `ft_strchr` â€“ Sucht das erste Vorkommen eines Zeichens in einem String
- [ ] `ft_strrchr` â€“ Sucht das letzte Vorkommen eines Zeichens in einem String
- [ ] `ft_strncmp` â€“ Vergleicht zwei Strings lexikografisch bis zu einer bestimmten LÃ¤nge
- [ ] `ft_strnstr` â€“ Sucht nach einem String in einem anderen String
- [ ] `ft_strlcpy` â€“ Kopiert einen String mit LÃ¤ngenbegrenzung (braucht `ft_strlen`)
- [ ] `ft_strlcat` â€“ FÃ¼gt einen String mit LÃ¤ngenbegrenzung an einen anderen an (braucht `ft_strlen`)

---

## ğŸŸ§ 4. Stringfunktionen â€“ mit malloc (dynamisch)
Diese Funktionen arbeiten mit dynamischem Speicher (malloc, calloc) und sind fÃ¼r komplexe Stringmanipulationen wichtig.

- [ ] `ft_substr` â€“ Gibt einen Teilstring eines Strings zurÃ¼ck
- [ ] `ft_strjoin` â€“ Verbindet zwei Strings zu einem neuen
- [ ] `ft_strtrim` â€“ Entfernt unerwÃ¼nschte Zeichen am Anfang und Ende eines Strings
- [ ] `ft_split` â€“ Teilt einen String in mehrere Teile, basierend auf einem Trennzeichen
- [ ] `ft_strmapi` â€“ Wendet eine Funktion auf jeden Charakter eines Strings an
- [ ] `ft_striteri` â€“ Wendet eine Funktion auf jeden Charakter eines Strings mit Index an

---

## ğŸŸ¥ 5. Konvertierung & Ausgabe
Diese Funktionen helfen dir, Zahlen in Strings zu konvertieren und Ausgaben zu steuern.

- [ ] `ft_itoa` â€“ Wandelt eine Zahl in einen String um
- [ ] `ft_atoi` â€“ Wandelt einen String in eine Zahl um
    - **Tipp**: Nutzt `ft_isdigit`, evtl. `isspace` (weiÃŸ, wie du Leerzeichen Ã¼berspringen kannst)
- [ ] `ft_putchar_fd` â€“ Gibt ein Zeichen an eine Datei aus
- [ ] `ft_putstr_fd` â€“ Gibt einen String an eine Datei aus
- [ ] `ft_putendl_fd` â€“ Gibt einen String gefolgt von einem Zeilenumbruch an eine Datei aus
- [ ] `ft_putnbr_fd` â€“ Gibt eine Zahl an eine Datei aus
    - **Tipp**: Hier kannst du `ft_itoa` verwenden, um die Zahl in einen String zu konvertieren, bevor du sie ausgibst
